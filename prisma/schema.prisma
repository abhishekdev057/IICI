generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  name            String?
  image           String?
  emailVerified   DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  role            UserRole         @default(USER)
  isActive        Boolean          @default(true)
  phone           String?
  organization    String?
  position        String?
  department      String?
  accounts        Account[]
  adminReviews    AdminReview[]
  applications    Application?
  certifications  Certification[]
  institutionData InstitutionData?
  notifications   Notification[]
  scoreAudits     ScoreAudit[]
  sessions        Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model InstitutionData {
  id               String        @id @default(cuid())
  userId           String        @unique
  name             String
  logo             String?
  yearFounded      Int
  industry         String
  organizationSize String
  country          String
  website          String?
  contactEmail     String
  contactPhone     String?
  address          String?
  description      String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  applications     Application[]
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("institution_data")
}

model Application {
  id                 String              @id @default(cuid())
  userId             String              @unique
  institutionId      String
  status             ApplicationStatus   @default(DRAFT)
  submittedAt        DateTime?
  reviewedAt         DateTime?
  reviewedBy         String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  pillarData         Json?
  adminReviews       AdminReview[]
  institutionData    InstitutionData     @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  certifications     Certification?
  evidence           Evidence[]
  indicatorResponses IndicatorResponse[]
  scoreAudits        ScoreAudit[]

  @@map("applications")
}

model IndicatorResponse {
  id              String      @id @default(cuid())
  applicationId   String
  indicatorId     String
  pillarId        Int
  rawValue        Json
  normalizedScore Float
  measurementUnit String
  hasEvidence     Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  evidence        Evidence[]
  application     Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@unique([applicationId, indicatorId])
  @@map("indicator_responses")
}

model Evidence {
  id                  String            @id @default(cuid())
  indicatorResponseId String
  applicationId       String
  type                EvidenceType
  fileName            String?
  fileSize            Int?
  fileType            String?
  url                 String?
  description         String?
  uploadedAt          DateTime          @default(now())
  application         Application       @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  indicatorResponse   IndicatorResponse @relation(fields: [indicatorResponseId], references: [id], onDelete: Cascade)

  @@map("evidence")
}

model ScoreAudit {
  id                 String             @id @default(cuid())
  applicationId      String
  userId             String
  pillarId           Int
  pillarScore        Float
  overallScore       Float
  certificationLevel CertificationLevel
  calculatedAt       DateTime           @default(now())
  calculatedBy       String
  scoreData          Json
  application        Application        @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("score_audits")
}

model Certification {
  id                 String             @id @default(cuid())
  applicationId      String             @unique
  userId             String
  certificationLevel CertificationLevel
  overallScore       Float
  pillarScores       Json
  issuedAt           DateTime           @default(now())
  expiresAt          DateTime
  certificateUrl     String?
  badgeUrl           String?
  isActive           Boolean            @default(true)
  application        Application        @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("certifications")
}

model AdminReview {
  id            String       @id @default(cuid())
  applicationId String
  reviewerId    String
  indicatorId   String?
  action        ReviewAction
  comments      String
  originalScore Float?
  adjustedScore Float?
  createdAt     DateTime     @default(now())
  application   Application  @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  user          User         @relation(fields: [reviewerId], references: [id], onDelete: Cascade)

  @@map("admin_reviews")
}

model FeaturePermission {
  id         String   @id @default(cuid())
  role       UserRole
  feature    String
  canRead    Boolean  @default(false)
  canWrite   Boolean  @default(false)
  canDelete  Boolean  @default(false)
  canApprove Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([role, feature])
  @@map("feature_permissions")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  readAt    DateTime?
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum ApplicationStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  RESUBMISSION_REQUIRED
}

enum EvidenceType {
  FILE
  LINK
  TEXT
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  ASSESSMENT
  CERTIFICATION
}

enum CertificationLevel {
  CERTIFIED
  NOT_CERTIFIED
}

enum ReviewAction {
  APPROVE
  REJECT
  REQUEST_EVIDENCE
  OVERRIDE_SCORE
}
