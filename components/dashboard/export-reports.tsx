"use client"

import { useState, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Download, FileText, Table, Share2, Mail, Copy, Printer, ExternalLink, CheckCircle, AlertCircle } from "lucide-react"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { useToast } from "@/components/ui/use-toast"
import jsPDF from "jspdf"
import html2canvas from "html2canvas"

interface ExportReportsProps {
  overallScore: number
  pillarScores: number[]
  certificationLevel: "Gold" | "Certified" | "Not Certified"
  organizationName: string
  issuedDate?: string
  expiryDate?: string
}

export function ExportReports({
  overallScore,
  pillarScores,
  certificationLevel,
  organizationName,
  issuedDate,
  expiryDate,
}: ExportReportsProps) {
  const [isGenerating, setIsGenerating] = useState(false)
  const [isExporting, setIsExporting] = useState(false)
  const [isSharing, setIsSharing] = useState(false)
  const { toast } = useToast()
  const reportRef = useRef<HTMLDivElement>(null)

  const pillarNames = [
    "Strategic Foundation & Leadership",
    "Resource Allocation & Infrastructure", 
    "Innovation Processes & Culture",
    "Knowledge & IP Management",
    "Strategic Intelligence & Collaboration",
    "Performance Measurement & Improvement"
  ]

  const getScoreColor = (score: number) => {
    if (score >= 70) return "text-green-600"
    if (score >= 50) return "text-yellow-600"
    return "text-red-600"
  }

  const getScoreStatus = (score: number) => {
    if (score >= 70) return "Excellent"
    if (score >= 50) return "Good"
    return "Needs Improvement"
  }

  const generatePDFReport = async (type: "comprehensive" | "executive" = "comprehensive") => {
    setIsGenerating(true)
    
    try {
      console.log("Starting PDF generation...", { type, organizationName, overallScore })
      
      const pdf = new jsPDF("p", "mm", "a4")
      const pageWidth = pdf.internal.pageSize.getWidth()
      const pageHeight = pdf.internal.pageSize.getHeight()
      const margin = 20
      const contentWidth = pageWidth - 2 * margin
      
      let yPosition = margin

      // Header
      pdf.setFontSize(24)
      pdf.setFont("helvetica", "bold")
      pdf.text("IIICI Certification Report", pageWidth / 2, yPosition, { align: "center" })
      yPosition += 15

      pdf.setFontSize(12)
      pdf.setFont("helvetica", "normal")
      pdf.text(`Organization: ${organizationName}`, margin, yPosition)
      yPosition += 8
      pdf.text(`Assessment Date: ${issuedDate ? new Date(issuedDate).toLocaleDateString() : new Date().toLocaleDateString()}`, margin, yPosition)
      yPosition += 8
      pdf.text(`Certification Level: ${certificationLevel}`, margin, yPosition)
      yPosition += 15

      // Overall Score
      pdf.setFontSize(16)
      pdf.setFont("helvetica", "bold")
      pdf.text("Overall Innovation Maturity Score", margin, yPosition)
      yPosition += 10

      pdf.setFontSize(36)
      pdf.setFont("helvetica", "bold")
      pdf.text(`${overallScore.toFixed(1)}%`, margin, yPosition)
      yPosition += 15

      // Pillar Scores
      pdf.setFontSize(14)
      pdf.setFont("helvetica", "bold")
      pdf.text("Pillar Performance Analysis", margin, yPosition)
      yPosition += 10

      pdf.setFontSize(10)
      pdf.setFont("helvetica", "normal")

      pillarScores.forEach((score, index) => {
        if (yPosition > pageHeight - 30) {
          pdf.addPage()
          yPosition = margin
        }

        const status = getScoreStatus(score)
        pdf.text(`${pillarNames[index]}: ${score.toFixed(1)}% (${status})`, margin, yPosition)
        yPosition += 6
      })

      yPosition += 10

      // Recommendations
      if (type === "comprehensive") {
        pdf.setFontSize(14)
        pdf.setFont("helvetica", "bold")
        pdf.text("Recommendations", margin, yPosition)
        yPosition += 10

        pdf.setFontSize(10)
        pdf.setFont("helvetica", "normal")

        const recommendations = [
          "Focus on strengthening areas with scores below 70%",
          "Develop action plans for continuous improvement",
          "Consider implementing innovation best practices",
          "Regular assessment and monitoring recommended"
        ]

        recommendations.forEach((rec, index) => {
          if (yPosition > pageHeight - 30) {
            pdf.addPage()
            yPosition = margin
          }
          pdf.text(`${index + 1}. ${rec}`, margin, yPosition)
          yPosition += 6
        })
      }

      // Footer
      const footerY = pageHeight - 10
      pdf.setFontSize(8)
      pdf.setFont("helvetica", "italic")
      pdf.text("Generated by IIICI Certification System", pageWidth / 2, footerY, { align: "center" })

      // Save the PDF with better error handling
      const fileName = `IIICI_${type}_Report_${organizationName.replace(/[^a-zA-Z0-9]/g, "_")}_${new Date().toISOString().split('T')[0]}.pdf`
      console.log("Attempting to save PDF with filename:", fileName)
      
      try {
        pdf.save(fileName)
        console.log("PDF saved successfully")
        
        toast({
          title: "Report Generated Successfully!",
          description: `${type.charAt(0).toUpperCase() + type.slice(1)} report has been downloaded.`,
          variant: "default",
        })
      } catch (saveError) {
        console.error("Error saving PDF:", saveError)
        
        // Fallback: try to open in new window
        const pdfBlob = pdf.output('blob')
        const url = URL.createObjectURL(pdfBlob)
        const link = document.createElement('a')
        link.href = url
        link.download = fileName
        link.click()
        URL.revokeObjectURL(url)
        
        toast({
          title: "Report Generated Successfully!",
          description: `${type.charAt(0).toUpperCase() + type.slice(1)} report has been downloaded.`,
          variant: "default",
        })
      }

    } catch (error) {
      console.error("Error generating PDF:", error)
      toast({
        title: "Error Generating Report",
        description: "There was an issue generating the PDF report. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsGenerating(false)
    }
  }

  const exportToCSV = () => {
    setIsExporting(true)
    
    try {
      console.log("Starting CSV export...", { organizationName, overallScore })
      
      const csvData = [
        ["IIICI Certification Report", ""],
        ["Organization", organizationName],
        ["Assessment Date", issuedDate ? new Date(issuedDate).toLocaleDateString() : new Date().toLocaleDateString()],
        ["Certification Level", certificationLevel],
        ["Overall Score", `${overallScore.toFixed(1)}%`],
        ["", ""],
        ["Pillar", "Score", "Status", "Performance Level"],
        ["Overall", `${overallScore.toFixed(1)}%`, certificationLevel, getScoreStatus(overallScore)],
        ...pillarScores.map((score, index) => [
          pillarNames[index],
          `${score.toFixed(1)}%`,
          getScoreStatus(score),
          score >= 70 ? "Excellent" : score >= 50 ? "Good" : "Needs Improvement"
        ])
      ]

      const csvContent = csvData.map((row) => row.map(cell => `"${cell}"`).join(",")).join("\n")
      const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" })
      const url = window.URL.createObjectURL(blob)

      const fileName = `IIICI_Scores_${organizationName.replace(/[^a-zA-Z0-9]/g, "_")}_${new Date().toISOString().split('T')[0]}.csv`
      console.log("Attempting to download CSV with filename:", fileName)

      const link = document.createElement("a")
      link.href = url
      link.download = fileName
      link.style.display = "none"
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)

      window.URL.revokeObjectURL(url)

      console.log("CSV exported successfully")
      toast({
        title: "CSV Exported Successfully!",
        description: "Your data has been exported to CSV format.",
        variant: "default",
      })

    } catch (error) {
      console.error("Error exporting CSV:", error)
      toast({
        title: "Export Error",
        description: "There was an issue exporting the CSV file. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsExporting(false)
    }
  }

  const exportToExcel = () => {
    setIsExporting(true)
    
    try {
      console.log("Starting Excel export...", { organizationName, overallScore })
      
      // Create Excel-like data structure
      const excelData = {
        "Organization Information": [
          ["Organization", organizationName],
          ["Assessment Date", issuedDate ? new Date(issuedDate).toLocaleDateString() : new Date().toLocaleDateString()],
          ["Certification Level", certificationLevel],
          ["Overall Score", `${overallScore.toFixed(1)}%`]
        ],
        "Pillar Scores": [
          ["Pillar", "Score", "Status", "Performance Level"],
          ...pillarScores.map((score, index) => [
            pillarNames[index],
            `${score.toFixed(1)}%`,
            getScoreStatus(score),
            score >= 70 ? "Excellent" : score >= 50 ? "Good" : "Needs Improvement"
          ])
        ]
      }

      // Convert to CSV format (Excel can open CSV files)
      const csvContent = Object.entries(excelData).map(([sheetName, data]) => {
        return [sheetName, ""].join(",") + "\n" + data.map(row => row.map(cell => `"${cell}"`).join(",")).join("\n")
      }).join("\n\n")

      const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" })
      const url = window.URL.createObjectURL(blob)

      const fileName = `IIICI_Excel_Report_${organizationName.replace(/[^a-zA-Z0-9]/g, "_")}_${new Date().toISOString().split('T')[0]}.csv`
      console.log("Attempting to download Excel with filename:", fileName)

      const link = document.createElement("a")
      link.href = url
      link.download = fileName
      link.style.display = "none"
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)

      window.URL.revokeObjectURL(url)

      console.log("Excel exported successfully")
      toast({
        title: "Excel Report Exported!",
        description: "Your data has been exported in Excel-compatible format.",
        variant: "default",
      })

    } catch (error) {
      console.error("Error exporting Excel:", error)
      toast({
        title: "Export Error",
        description: "There was an issue exporting the Excel file. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsExporting(false)
    }
  }

  const shareResults = async (method: "native" | "email" | "clipboard" = "native") => {
    setIsSharing(true)
    
    try {
      const shareText = `${organizationName} achieved ${certificationLevel} certification with ${overallScore.toFixed(1)}% overall score in IIICI Innovation Assessment.`
      const shareUrl = window.location.href

      switch (method) {
        case "native":
          if (navigator.share) {
            await navigator.share({
              title: "IIICI Certification Results",
              text: shareText,
              url: shareUrl,
            })
          } else {
            // Fallback to clipboard
            await navigator.clipboard.writeText(`${shareText}\n\nView full report: ${shareUrl}`)
            toast({
              title: "Results Copied!",
              description: "Results have been copied to your clipboard.",
              variant: "default",
            })
          }
          break

        case "email":
          const emailSubject = encodeURIComponent("IIICI Certification Results")
          const emailBody = encodeURIComponent(`${shareText}\n\nView full report: ${shareUrl}`)
          window.open(`mailto:?subject=${emailSubject}&body=${emailBody}`)
          break

        case "clipboard":
          await navigator.clipboard.writeText(`${shareText}\n\nView full report: ${shareUrl}`)
          toast({
            title: "Results Copied!",
            description: "Results have been copied to your clipboard.",
            variant: "default",
          })
          break
      }

    } catch (error) {
      console.error("Error sharing:", error)
      toast({
        title: "Sharing Error",
        description: "There was an issue sharing the results. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsSharing(false)
    }
  }

  const printReport = () => {
    const printWindow = window.open("", "_blank")
    if (printWindow) {
      printWindow.document.write(`
        <html>
          <head>
            <title>IIICI Certification Report - ${organizationName}</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 20px; }
              .header { text-align: center; margin-bottom: 30px; }
              .score { font-size: 48px; font-weight: bold; color: #2563eb; }
              .pillar { margin: 10px 0; padding: 10px; border: 1px solid #ddd; }
              .excellent { color: #059669; }
              .good { color: #d97706; }
              .needs-improvement { color: #dc2626; }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>IIICI Certification Report</h1>
              <h2>${organizationName}</h2>
              <p>Assessment Date: ${issuedDate ? new Date(issuedDate).toLocaleDateString() : new Date().toLocaleDateString()}</p>
            </div>
            
            <div style="text-align: center; margin: 30px 0;">
              <div class="score">${overallScore.toFixed(1)}%</div>
              <h3>Overall Innovation Maturity Score</h3>
              <h4>Certification Level: ${certificationLevel}</h4>
            </div>
            
            <h3>Pillar Performance Analysis</h3>
            ${pillarScores.map((score, index) => `
              <div class="pillar">
                <strong>${pillarNames[index]}</strong><br>
                Score: ${score.toFixed(1)}% | Status: ${getScoreStatus(score)}
              </div>
            `).join("")}
            
            <div style="margin-top: 30px; text-align: center; font-size: 12px; color: #666;">
              Generated by IIICI Certification System
            </div>
          </body>
        </html>
      `)
      printWindow.document.close()
      printWindow.print()
    }
  }

  return (
    <div className="space-y-6">
      {/* Quick Stats */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FileText className="w-5 h-5" />
            Report Summary
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 p-4 bg-muted/30 rounded-lg">
            <div className="text-center">
              <div className="text-2xl font-bold text-primary">{overallScore.toFixed(1)}%</div>
              <div className="text-xs text-muted-foreground">Overall Score</div>
            </div>
            <div className="text-center">
              <Badge
                className={
                  certificationLevel === "Gold"
                    ? "bg-yellow-500 text-white"
                    : certificationLevel === "Certified"
                      ? "bg-green-500 text-white"
                      : "bg-gray-500 text-white"
                }
              >
                {certificationLevel}
              </Badge>
              <div className="text-xs text-muted-foreground mt-1">Status</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-green-600">
                {pillarScores.filter((score) => score >= 70).length}/6
              </div>
              <div className="text-xs text-muted-foreground">Strong Pillars</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-blue-600">
                {issuedDate ? new Date(issuedDate).getFullYear() : new Date().getFullYear()}
              </div>
              <div className="text-xs text-muted-foreground">Assessment Year</div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Export Options */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Download className="w-5 h-5" />
            Export & Share Options
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {/* PDF Reports */}
            <div>
              <h4 className="font-medium mb-3 flex items-center gap-2">
                <FileText className="w-4 h-4" />
                PDF Reports
              </h4>
              <div className="flex flex-col sm:flex-row gap-3">
                <Button 
                  onClick={() => generatePDFReport("comprehensive")} 
                  disabled={isGenerating} 
                  className="flex-1 min-w-[200px]"
                >
                  <FileText className="w-4 h-4 mr-2" />
                  {isGenerating ? "Generating..." : "Comprehensive Report"}
                </Button>
                <Button 
                  onClick={() => generatePDFReport("executive")} 
                  disabled={isGenerating} 
                  variant="outline"
                  className="flex-1 min-w-[200px]"
                >
                  <FileText className="w-4 h-4 mr-2" />
                  Executive Summary
                </Button>
              </div>
            </div>

            {/* Data Export */}
            <div>
              <h4 className="font-medium mb-3 flex items-center gap-2">
                <Table className="w-4 h-4" />
                Data Export
              </h4>
              <div className="flex flex-col sm:flex-row gap-3">
                <Button 
                  onClick={exportToCSV} 
                  disabled={isExporting} 
                  variant="outline"
                  className="flex-1 min-w-[150px]"
                >
                  <Table className="w-4 h-4 mr-2" />
                  {isExporting ? "Exporting..." : "Export CSV"}
                </Button>
                <Button 
                  onClick={exportToExcel} 
                  disabled={isExporting} 
                  variant="outline"
                  className="flex-1 min-w-[150px]"
                >
                  <Table className="w-4 h-4 mr-2" />
                  {isExporting ? "Exporting..." : "Export Excel"}
                </Button>
              </div>
            </div>

            {/* Sharing Options */}
            <div>
              <h4 className="font-medium mb-3 flex items-center gap-2">
                <Share2 className="w-4 h-4" />
                Share Results
              </h4>
              <div className="grid grid-cols-2 sm:grid-cols-4 gap-3">
                <Button 
                  onClick={() => shareResults("native")} 
                  disabled={isSharing} 
                  variant="outline"
                  className="min-w-[120px]"
                >
                  <Share2 className="w-4 h-4 mr-2" />
                  {isSharing ? "Sharing..." : "Share"}
                </Button>
                <Button 
                  onClick={() => shareResults("email")} 
                  disabled={isSharing} 
                  variant="outline"
                  className="min-w-[120px]"
                >
                  <Mail className="w-4 h-4 mr-2" />
                  Email
                </Button>
                <Button 
                  onClick={() => shareResults("clipboard")} 
                  disabled={isSharing} 
                  variant="outline"
                  className="min-w-[120px]"
                >
                  <Copy className="w-4 h-4 mr-2" />
                  Copy Link
                </Button>
                <Button 
                  onClick={printReport} 
                  variant="outline"
                  className="min-w-[120px]"
                >
                  <Printer className="w-4 h-4 mr-2" />
                  Print
                </Button>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Report Types */}
      <Card>
        <CardHeader>
          <CardTitle>Available Report Types</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex items-center justify-between p-4 border rounded-lg">
              <div className="flex items-start gap-3">
                <CheckCircle className="w-5 h-5 text-green-600 mt-0.5" />
                <div>
                  <div className="font-medium">Comprehensive Assessment Report</div>
                  <div className="text-sm text-muted-foreground">
                    Detailed analysis with charts, recommendations, and evidence summary
                  </div>
                </div>
              </div>
              <Button size="sm" onClick={() => generatePDFReport("comprehensive")} disabled={isGenerating}>
                <Download className="w-3 h-3 mr-1" />
                Download
              </Button>
            </div>

            <div className="flex items-center justify-between p-4 border rounded-lg">
              <div className="flex items-start gap-3">
                <CheckCircle className="w-5 h-5 text-green-600 mt-0.5" />
                <div>
                  <div className="font-medium">Executive Summary</div>
                  <div className="text-sm text-muted-foreground">
                    High-level overview for leadership and stakeholders
                  </div>
                </div>
              </div>
              <Button size="sm" variant="outline" onClick={() => generatePDFReport("executive")} disabled={isGenerating}>
                <Download className="w-3 h-3 mr-1" />
                Download
              </Button>
            </div>

            <div className="flex items-center justify-between p-4 border rounded-lg">
              <div className="flex items-start gap-3">
                <CheckCircle className="w-5 h-5 text-green-600 mt-0.5" />
                <div>
                  <div className="font-medium">Raw Data Export</div>
                  <div className="text-sm text-muted-foreground">All responses and scores in spreadsheet format</div>
                </div>
              </div>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button size="sm" variant="outline">
                    <Download className="w-3 h-3 mr-1" />
                    Export
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent>
                  <DropdownMenuItem onClick={exportToCSV} disabled={isExporting}>
                    <Table className="w-4 h-4 mr-2" />
                    CSV Format
                  </DropdownMenuItem>
                  <DropdownMenuItem onClick={exportToExcel} disabled={isExporting}>
                    <Table className="w-4 h-4 mr-2" />
                    Excel Format
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Report Preview */}
      <Card>
        <CardHeader>
          <CardTitle>Report Preview</CardTitle>
        </CardHeader>
        <CardContent>
          <div ref={reportRef} className="border rounded-lg p-6 bg-white">
            <div className="text-center mb-6">
              <h2 className="text-2xl font-bold mb-2">IIICI Certification Report</h2>
              <p className="text-muted-foreground">{organizationName}</p>
              <p className="text-sm text-muted-foreground">
                Assessment Date: {issuedDate ? new Date(issuedDate).toLocaleDateString() : new Date().toLocaleDateString()}
              </p>
            </div>

            <div className="text-center mb-8">
              <div className="text-4xl font-bold text-primary mb-2">{overallScore.toFixed(1)}%</div>
              <div className="text-lg font-medium">Overall Innovation Maturity Score</div>
              <Badge className="mt-2 text-sm">
                {certificationLevel}
              </Badge>
            </div>

            <div className="space-y-3">
              <h3 className="font-semibold">Pillar Performance Analysis</h3>
              {pillarScores.map((score, index) => (
                <div key={index} className="flex justify-between items-center p-3 border rounded">
                  <span className="font-medium">{pillarNames[index]}</span>
                  <div className="text-right">
                    <span className={`font-bold ${getScoreColor(score)}`}>{score.toFixed(1)}%</span>
                    <div className="text-sm text-muted-foreground">{getScoreStatus(score)}</div>
                  </div>
                </div>
              ))}
            </div>

            <div className="mt-6 text-center text-sm text-muted-foreground">
              Generated by IIICI Certification System
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
